▷ 3-Tier Architecture
	애플리케이션을 세 개의 독립된 계층으로 나누어 설계하는 구조.
	각 계층은 특정한 역할과 책임을 가지고 다른 계층과 독립적으로 동작할 수 있다.

	1) 프레젠테이션 계층
		HTTP 요청을 받고 이 요청을 비즈니스 계층으로 전송하는 역할을 한다.
		사용자로부터 입력을 받고 이를 처리하여 사용자에게 결과 보여준다.
		웹 페이지와 Controller 가 이 계층에 해당한다.

	2) 비즈니스 계층
		해당 계층은 비즈니스 로직을 처리한다.
		비즈니스 로직이란 쉽게 말해 프로세스를 구현하기 위한 모든 로직이라고 생각하면 된다.
		Service 가 이 계층에 해당한다.

	3) 퍼시스턴스 계층
		모든 데이터베이스 관련 로직을 처리.

▶ Mapper
	SQL 을 자바 메소드에 매핑하여 데이터베이스와 상호작용할 수 있게 해준다.
	데이터베이스 작업을 추상화하여 코드 내에서 간단하게 호출할 수 있는 메소드로 변환.
	select 결과도, 쿼리 내에 들어가는 파라미터도 자동으로 매핑해준다.

	mapper 인터페이스 - 자바 메소드와 SQL 매핑을 정의.
	mapper.xml - SQL 쿼리를 정의

▶ Service
	애플리케이션의 비즈니스 로직을 담당한다.
	퍼시스턴스 계층과 프레젠테이션 계층 사이의 중간 계층으로, 두 계층 간의 상호 작용을 관리한다.

▶ Controller
	사용자의 요청을 받아 비즈니스 로직을 처리한 후 결과를 사용자에게 응답으로 반환한다.
	HTTP 요청을 매핑하고, 요청을 처리하는 메소드를 정의하며, 응답을 반환한다.
	응답은 HTML 이 될 수도 있고(@Controller) 데이터(@RestController)가 될 수도 있다.

▶ HTTP 메소드
	- GET
		주소에 데이터를 추가하여 전달하는 방식.
		보통 쿼리 문자열(query string)에 포함되어 전송되므로, 길이에 제한이 있으며
		주소에 데이터가 보이므로 보안상 취약점이 존재한다.
		중요한 데이터 혹은 길이가 긴 데이터는 POST 방식으로 사용하여 요청하는 것이 좋지만
		GET 방식이 POST 방식보다 상대적으로 빠른 전송방식이다.
		주로 데이터 조회하는데 사용한다.

	- POST
		데이터를 별도로 첨부하여 전달하는 방식.
		브라우저 히스토리에도 남지 않고 데이터는 쿼리 문자열과는 별도로 전송된다.
		따라서 데이터의 길이에 제한도 없으며, GET 방식 보다 보안성이 높다.
		하지만 GET 방식 보다 상대적으로 느리다.
		주로 insert, update, delete 에 사용된다.

▷ 템플릿 엔진
	서버에서 데이터를 받아 HTML 에 해당 데이터를 넣어 보여주는 도구.
	종류 = thymeleaf, JSP 등 (스프링에서 권장하는 것은 thymeleaf)

▶ thymeleaf
	의존성을 추가하는 것 만으로 별다른 설정 없이 사용할 수 있다.	

	- 표현식
	1) ${user.name} - 변수의 값을 표현
	2) #{properties.name} - 속성 파일 값을 표현 잘 사용하지 않음.
	3) @{test/test} - URI 표현
	4) *{name} - th:object=${user}

	- 문법
	1) th:text - 텍스트를 표현할 때 사용.
		ex) th:text="${user.name}"
	2) th:object - 선택한 객체로 지정
		ex) th:object="${user}"
		    th:text="${name}"
	3) th:each - 반복할 때 사용
		ex) th:each="user:${users}"
	4) th:if - 조건이 true 일 때 해당 태그를 표시
		ex) th:if="${user.age} > 19"
	5) th:unless - 조건이 false 일 때 해당 태그를 표시
		ex) th:unless="${user.age} > 19"
	6) th:href - URI 경로 지정
		ex) th:href="@{/test/test}"
	7) th:with - 변수 생성
		ex) th:with="name=${user.name}"