▷ MVC 패턴이란?
	애플리케이션 개발을 MVC(Model-View-Controller)로 구분하여 각 역할에 맞게 코드를 작성하는 방식.

▶ MVC 구성 요소
	1) Model : 데이터베이스와의 상호 작용하며 결과 데이터를 클라이언트에게 돌려줄 때 사용.
	2) View : 사용자에게 보여지는 화면, 모델 데이터를 표시하고 입력을 받는 역할을 함.
	3) Controller : 사용자 입력을 처리하고 모델과 뷰를 연결. 모델을 업데이트하고 뷰를 선택 함.

▶ MVC 1
	MVC1 패턴이란, 요청의 처리 결과를 DB로 부터 받은 Model 객체를 JSP 페이지(View)에 담아 응답을 보내는 패턴.
	JSP가 View와 Controller 역할을 모두 담당하기 때문에 JSP 페이지 내에 너무 많은 코드가 들어가 가독성이 떨어짐.

	※ .jsp는 html 안에 java 코드를 작성할 수 있게끔 해준다.


		--->
	클라이언트	     View(Controller) <--> Model <--> DB
		<---

▶ MVC 2
	MVC1 패턴에 Front Controller가 추가된 형태
	Front Controller : MVC2의 핵심, 모든 요청을 중앙 집중식으로 처리.

	1) 사용자의 모든 요청이 Front Controller로 들어옴
	2) 요청을 분석하고 적절한 컨트롤러에 전달
	3) 컨트롤러는 비즈니스 로직을 수행하고 모델을 업데이트한 후 결과를 뷰에 전달!
	4) Front Controller는 최종적으로 뷰를 렌더링하여 사용자에게 응답을 반환.

▶ Spring MVC
	스프링 프레임워크에서 MVC2 모델을 좀 더 발전 시킨 형태.

	1) 클라이언트가 서버에 요청을 하면, Front Controller인 DispatcherServlet 클래스가 요청을 받는다.
	2) DispatcherServlet은 HandlerMapping 에게 요청이 들어온 url와 매핑되는 컨트롤러 검색 요청!, 찾으면 반환!
	3) 반환 받은 컨트롤러로 클라이언트의 요청 처리를 요청!
	4) Controller는 비즈니스 로직을 수행한 후 결과를 반환!
	5) 반환하는 View가 있다면 ViewResolver에게 View를 찾아달라고 요청! 찾으면 반환!
	6) 최종적으로 DispatcherServlet이 응답할 뷰의 랜더를 지시!
	7) 최종 랜더링 후 마무리!